<?php

namespace OpeningHours\Test\Module\Shortcode;

use OpeningHours\Entity\Holiday;
use OpeningHours\Entity\IrregularOpening;
use OpeningHours\Entity\Period;
use OpeningHours\Module\Shortcode\IsOpen;
use OpeningHours\Test\OpeningHoursTestCase;
use OpeningHours\Util\Dates;

class IsOpenTest extends OpeningHoursTestCase {
  public function testGetTodayPeriodsOnlyPeriods() {
    $sc = IsOpen::getInstance();

    $periods = array(new Period(0, '13:00', '18:00'));

    $todayData = array(
      'periods' => $periods,
      'holidays' => array(),
      'irregularOpenings' => array()
    );

    $result = $sc->getTodaysPeriods($todayData);
    $this->assertEquals($periods, $result);
  }

  public function testGetTodaysPeriodsHoliday() {
    $sc = IsOpen::getInstance();

    $todayData = array(
      'periods' => array(new Period(0, '13:00', '18:00')),
      'holidays' => array(new Holiday('Holiday', new \DateTime('2017-04-20'), new \DateTime('2017-04-21'))),
      'irregularOpenings' => array()
    );

    $result = $sc->getTodaysPeriods($todayData);
    $this->assertEquals(array(), $result);
  }

  public function testGetTodaysPeriodsIrregularOpening() {
    $sc = IsOpen::getInstance();

    $todayData = array(
      'periods' => array(new Period(0, '13:00', '18:00')),
      'holidays' => array(new Holiday('Holiday', new \DateTime('2017-04-20'), new \DateTime('2017-04-21'))),
      'irregularOpenings' => array(new IrregularOpening('IO', '2017-04-17', '12:00', '20:00'))
    );

    $result = $sc->getTodaysPeriods($todayData);
    $this->assertEquals(1, count($result));

    $period = $result[0];
    $this->assertEquals(1, $period->getWeekday());
    $this->assertEquals('12:00', $period->getTimeStart()->format(Dates::STD_TIME_FORMAT));
    $this->assertEquals('20:00', $period->getTimeEnd()->format(Dates::STD_TIME_FORMAT));
  }

  public function testFormatNextPeriod() {
    $sc = IsOpen::getInstance();

    $period = new Period(1, '13:00', '14:00');
    $period = $period->getCopyInDateContext(new \DateTime('2017-04-24'));

    \WP_Mock::wpFunction('date_i18n', array(
      'times' => 1,
      'args' => array(Dates::STD_DATE_FORMAT, (int) $period->getTimeStart()->format('U')),
      'return' => '2017-04-24'
    ));

    $result = $sc->formatNext($period, array(
      'next_format' => '%1$s;%2$s;%3$s;%4$s',
      'time_format' => Dates::STD_TIME_FORMAT,
      'date_format' => Dates::STD_DATE_FORMAT
    ));

    $expected = '2017-04-24;Monday;13:00;14:00';
    $this->assertEquals($expected, $result);
  }

  public function testFormatNextPeriodNoPeriod() {
    $sc = IsOpen::getInstance();

    $result = $sc->formatNext(null, array());
    $this->assertEquals(null, $result);
  }

  public function testFormatNext() {
    $sc = IsOpen::getInstance();

    $periods = array(new Period(0, '13:00', '14:00'), new Period(0, '15:00', '16:00'), new Period(0, '17:00', '18:00'));

    $result = $sc->formatToday($periods, array(
      'today_format' => '%1$s;%2$s;%3$s',
      'time_format' => Dates::STD_TIME_FORMAT
    ));

    $expected = '13:00 – 14:00, 15:00 – 16:00, 17:00 – 18:00;13:00;18:00';
    $this->assertEquals($expected, $result);
  }

  public function testFormatTodayNoPeriods() {
    $sc = IsOpen::getInstance();

    $result = $sc->formatToday(array(), array());
    $this->assertEquals(null, $result);
  }
}
